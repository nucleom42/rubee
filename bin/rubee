#!/usr/bin/env ruby

require 'fileutils'

require_relative '../lib/inits/print_colors'
require_relative '../lib/rubee'


ENV['RACK_ENV'] ||= 'development'

LIB_ROOT = File.expand_path('../lib', File.dirname(__FILE__))
ENV['RACKUP_FILE'] = File.join(LIB_ROOT, 'config.ru')

LOGO = <<-'LOGO'
  ____  _    _  ____  _____
 |  _ \| |  | || __ )| ____|
 | |_) | |  | ||  _ \|  _|
 |  _ <| |__| || |_) | |___
 |_| \_\\____/ |____/|_____|
 Ver: %s
LOGO

command = ARGV.first

def print_logo
  puts "\e[36m#{LOGO % Rubee::VERSION}\e[0m" # Cyan color
end

if command =~ /^(start)$|^(start:(\d+))$/
  _, port = ARGV.first&.split(':')

  port ||= '7000'
  print_logo
  color_puts "Starting takeoff of ruBee server on port #{port}...", color: :yellow
  exec("rackup #{ENV['RACKUP_FILE']} -p #{port}")
elsif command =~ /^(start_dev)$|^(start_dev:(\d+))$/
  _, port = ARGV.first&.split(':')

  port ||= '7000'
  print_logo

  color_puts "Starting takeoff of ruBee server on port #{port} in dev mode...", color: :yellow

  exec("rerun -- rackup --port #{port} #{ENV['RACKUP_FILE']}")
elsif command == 'stop'
  exec('pkill -f rubee')
elsif command == 'status'
  exec('ps aux | grep rubee')
elsif command == 'react'
  case ARGV[1]
  when 'prepare'
    if Rubee::PROJECT_NAME == 'rubee'
      exec('cd ./lib && npm run prepare')
    else
      exec('npm run prepare')
    end
  when 'watch'
    if Rubee::PROJECT_NAME == 'rubee'
      exec('cd ./lib && npm run watch')
    else
      exec('npm run watch')
    end
  else
    color_puts "Unknown command: #{command}", color: :red
    exit 1
  end
elsif command == 'project'
  project_name = ARGV[1]
  if project_name.nil?
    color_puts 'Please indicate project name.', color: :red
    exit 1
  end

  if project_name == 'rubee'
    color_puts "Error: Project 'rubee' is reserved", color: :red
    exit 1
  end

  source_dir = File.expand_path('../lib', __dir__)
  target_dir = File.expand_path("./#{project_name}", Dir.pwd)

  if Dir.exist?(target_dir)
    color_puts "Error: Project #{project_name} already exists!", color: :red
    exit 1
  end

  # Create target directory
  FileUtils.mkdir_p(target_dir)

  # Define blacklist
  blacklist_files = %w[rubee.rb print_colors.rb version.rb config.ru test_helper.rb Gemfile.lock test.yml test.db
                       development.db production.db]
  blacklist_dirs = %w[rubee tests .git .github .idea node_modules db]

  # Copy files, excluding blacklisted ones
  Dir.glob("#{source_dir}/**/*", File::FNM_DOTMATCH).each do |file|
    relative_path = file.sub("#{source_dir}/", '')

    # Skip blacklisted directories
    next if blacklist_dirs.any? { |dir| relative_path.split('/').include?(dir) }

    # Skip blacklisted files
    next if blacklist_files.include?(File.basename(file))

    target_path = File.join(target_dir, relative_path)

    if File.directory?(file)
      FileUtils.mkdir_p(target_path)
    else
      FileUtils.cp(file, target_path)
    end
  end

  # create tests dir and copy test_helper.rb and user_model_test.rb
  FileUtils.mkdir_p("#{target_dir}/tests")
  FileUtils.mkdir_p("#{target_dir}/tests/models")
  FileUtils.mkdir_p("#{target_dir}/tests/controllers")
  FileUtils.cp("#{source_dir}/tests/models/user_model_test.rb", "#{target_dir}/tests/models/user_model_test.rb")

  # create db dir
  FileUtils.mkdir_p("#{target_dir}/db")
  FileUtils.cp("#{source_dir}/db/structure.rb", "#{target_dir}/db/structure.rb")
  FileUtils.cp("#{source_dir}/db/create_users.rb", "#{target_dir}/db/create_users.rb")

  # create a gemfile context
  gemfile = <<~GEMFILE
    source 'https://rubygems.org'

    gem 'ru.Bee'
    gem 'sequel'
    gem 'sqlite3'
    gem 'rake'
    gem 'rack'
    gem 'rackup'
    gem 'pry'
    gem 'pry-byebug'
    gem 'puma'
    gem 'json'

    group :development do
      gem 'rerun'
      gem 'minitest'
      gem 'rack-test'
    end
  GEMFILE
  # create a gemfile
  File.open("#{target_dir}/Gemfile", 'w') do |file|
    file.puts gemfile
  end

  # create test_helper.rb file
  test_helper = <<~TESTHELPER
    require "bundler/setup"
    Bundler.require(:test)

    require 'minitest/autorun'
    require 'rack/test'
    require 'rubee'

    Rubee::Autoload.call
  TESTHELPER

  File.open("#{target_dir}/tests/test_helper.rb", 'w') do |file|
    file.puts test_helper
  end

  color_puts "Project #{project_name} created successfully at #{target_dir}", color: :green

elsif command == 'version'
  color_puts "ru.Bee v#{Rubee::VERSION}", color: :yellow
elsif command == 'routes'
  file = Rubee::PROJECT_NAME == 'rubee' ? File.join('/lib', 'config/routes.rb') : 'config/routes.rb'
  routes = eval(File.read(file))

  puts routes
elsif command == 'test'

  ENV['RACK_ENV'] = 'test'
  file_name = ARGV[1] # Get the first argument
  lib = Rubee::PROJECT_NAME == 'rubee' ? '/lib' : ''
  if file_name
    color_puts "Running #{file_name} test ...", color: :yellow
    exec("ruby -Itest -e \"require '.#{lib}/tests/#{file_name}'\"")
  else
    color_puts 'Running all tests ...', color: :yellow
    exec("ruby -Itest -e \"Dir.glob('.#{lib}/tests/**/*_test.rb').each { |file| require file }\"")
  end
elsif %w[generate gen].include?(command)
  method, path = ARGV[1..2]
  ENV['RACK_ENV'] ||= 'development'
  file = Rubee::PROJECT_NAME == 'rubee' ? File.join('/lib', 'config/routes.rb') : 'config/routes.rb'
  routes = eval(File.read(file))
  route = routes.find { |route| route[:path] == path.to_s && route[:method] == method.to_sym }
  color_puts("Route not found with path: #{path} and method: #{method}", color: :red) unless route

  Rubee::Generator.new(
    route[:model]&.[](:name),
    route[:model]&.[](:attributes),
    "#{route[:controller]&.capitalize}Controller",
    route[:action],
    react: route[:react]
  ).call
elsif command == 'db'
  Rubee::Autoload.call
  ENV['RACK_ENV'] ||= 'development'

  command, file_name = ARGV[1]&.split(':')
  if Rubee::PROJECT_NAME == 'rubee'
    Rubee::Configuration.setup(env = :test) do |config|
      config.database_url = { url: 'sqlite://lib/tests/test.db', env: }
    end
    Rubee::SequelObject.reconnect! unless command == 'init'
  end

  def ensure_database_exists(db_url)
    uri = URI.parse(db_url)
    case uri.scheme
    when 'sqlite'
      begin
        Sequel.connect(db_url)
        color_puts("Database #{ENV['RACK_ENV']} exists", color: :cyan)
      rescue Exception
        if File.exist?(db_path = db_url.sub(%r{^sqlite://}, ''))
          color_puts("Database #{ENV['RACK_ENV']} exists", color: :cyan)
        else
          Sequel.sqlite(db_path)
          color_puts("Database #{ENV['RACK_ENV']} created", color: :green)
        end
      end
    when 'postgres'
      begin
        Sequel.connect(db_url)
        color_puts("Database #{ENV['RACK_ENV']} exists", color: :cyan)
      rescue StandardError => _e
        con = Sequel.connect(Rubee::Configuration.get_database_url.gsub(%r{(/test|/development|/production)}, ''))
        con.run("CREATE DATABASE #{ENV['RACK_ENV']}")
        color_puts("Database #{ENV['RACK_ENV']} created", color: :green)
      end
    else
      color_puts("Unsupported database type: #{db_url}", color: :red)
    end
  end

  def generate_structure
    schema_hash = {}

    Rubee::SequelObject::DB.tables.each do |table|
      schema_hash[table] = {}

      Rubee::SequelObject::DB.schema(table).each do |column, details|
        schema_hash[table][column] = details
      end
    end
    formatted_hash = JSON.pretty_generate(schema_hash)
      .gsub(/"(\w+)":/, '\1:') # Convert keys to symbols
      .gsub(': null', ': nil') # Convert `null` to `nil`

    File.open('db/structure.rb', 'w') do |file|
      file.puts "STRUCTURE = #{formatted_hash}"
    end

    color_puts('db/structure.rb updated', color: :green)
  end

  case command
  when 'run'
    Rubee::Autoload.call
    file_names = if file_name == 'all'
      lib = Rubee::PROJECT_NAME == 'rubee' ? '/lib' : ''
      Dir.glob(".#{lib}/db/*.rb").map do |file|
        File.basename(file, '.rb')
      end.reject { |file| file == 'structure' }
    else
      [file_name]
    end
    Rubee::Configuration.envs.each do |env|
      ENV['RACK_ENV'] = env.to_s
      file_names.each do |file_name|
        color_puts("Run #{file_name} file for #{env} env", color: :cyan)
        Object.const_get(file_name.split('_').map(&:capitalize).join).new.call
      end
    end
    color_puts("Migration for #{file_name} completed", color: :green)
    unless Rubee::PROJECT_NAME == 'rubee'
      color_puts('Regenerate schema file', color: :cyan)
      generate_structure
    end
  when 'init'
    ensure_database_exists(Rubee::Configuration.get_database_url)
  when 'structure'
    generate_structure
  else
    color_puts("Unknown command: #{command}", color: :red)
  end
elsif ['console'].include?(command)
  ARGV.clear
  ENV['RACK_ENV'] ||= 'development'

  Rubee::Autoload.call
  if Rubee::PROJECT_NAME == 'rubee'
    Rubee::Configuration.setup(env = :test) do |config|
      config.database_url = { url: 'sqlite://lib/tests/test.db', env: }
    end
    Rubee::Autoload.call
    Rubee::SequelObject.reconnect!
  end

  def reload
    app_files = Dir["./#{Rubee::APP_ROOT}/**/*.rb"]
    app_files.each { |file| load(file) }
    color_puts('Reloaded ..', color: :green)
  end
  begin
    # Start IRB
    IRB.start
  rescue Exception
    IRB.start
  end
else
  color_puts "Unknown command: #{command}", color: :red
end
