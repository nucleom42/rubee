#!/usr/bin/env ruby

require 'fileutils'

require_relative '../lib/inits/print_colors'
require_relative '../lib/rubee'

ENV['RACK_ENV'] ||= 'development'

LIB_ROOT = File.expand_path('../lib', File.dirname(__FILE__))
ENV['RACKUP_FILE'] = File.join(LIB_ROOT, 'config.ru')

LOGO = <<-'LOGO'
  ____  _    _  ____  _____
 |  _ \| |  | || __ )| ____|
 | |_) | |  | ||  _ \|  _|
 |  _ <| |__| || |_) | |___
 |_| \_\\____/ |____/|_____|
 Ver: %s
LOGO

command = ARGV.first

Rubee::Autoload.call

Rubee::CLI::Command.new(ARGV).call

if command == 'test'

  ENV['RACK_ENV'] = 'test'
  file_name = ARGV[1] # Get the first argument
  lib = Rubee::PROJECT_NAME == 'rubee' ? '/lib' : ''
  if file_name
    color_puts "Running #{file_name} test ...", color: :yellow
    exec("ruby -Itest -e \"require '.#{lib}/tests/#{file_name}'\"")
  else
    color_puts 'Running all tests ...', color: :yellow
    exec("ruby -Itest -e \"Dir.glob('.#{lib}/tests/**/*_test.rb').each { |file| require file }\"")
  end
elsif %w[generate gen].include?(command)
  method, path = ARGV[1..2]
  ENV['RACK_ENV'] ||= 'development'
  file = Rubee::PROJECT_NAME == 'rubee' ? File.join('/lib', 'config/routes.rb') : 'config/routes.rb'
  routes = eval(File.read(file))
  route = routes.find { |route| route[:path] == path.to_s && route[:method] == method.to_sym }
  color_puts("Route not found with path: #{path} and method: #{method}", color: :red) unless route
  Rubee::Generator.new(
    route[:model]&.[](:name),
    route[:model]&.[](:attributes),
    "#{route[:controller]&.capitalize}Controller",
    route[:action],
    react: route[:react]
  ).call
elsif command == 'db'
  Rubee::Autoload.call
  ENV['RACK_ENV'] ||= 'development'

  command, file_name = ARGV[1]&.split(':')
  if Rubee::PROJECT_NAME == 'rubee'
    Rubee::Configuration.setup(env = :test) do |config|
      config.database_url = { url: 'sqlite://lib/tests/test.db', env: }
    end
    Rubee::SequelObject.reconnect! unless command == 'init'
  end

  def ensure_database_exists(db_url)
    uri = URI.parse(db_url)
    case uri.scheme
    when 'sqlite'
      begin
        Sequel.connect(db_url)
        color_puts("Database #{ENV['RACK_ENV']} exists", color: :cyan)
      rescue Exception
        if File.exist?(db_path = db_url.sub(%r{^sqlite://}, ''))
          color_puts("Database #{ENV['RACK_ENV']} exists", color: :cyan)
        else
          Sequel.sqlite(db_path)
          color_puts("Database #{ENV['RACK_ENV']} created", color: :green)
        end
      end
    when 'postgres'
      begin
        Sequel.connect(db_url)
        color_puts("Database #{ENV['RACK_ENV']} exists", color: :cyan)
      rescue StandardError => _e
        con = Sequel.connect(Rubee::Configuration.get_database_url.gsub(%r{(/test|/development|/production)}, ''))
        con.run("CREATE DATABASE #{ENV['RACK_ENV']}")
        color_puts("Database #{ENV['RACK_ENV']} created", color: :green)
      end
    else
      color_puts("Unsupported database type: #{db_url}", color: :red)
    end
  end

  def generate_structure
    schema_hash = {}

    Rubee::SequelObject::DB.tables.each do |table|
      schema_hash[table] = {}

      Rubee::SequelObject::DB.schema(table).each do |column, details|
        schema_hash[table][column] = details
      end
    end
    formatted_hash = JSON.pretty_generate(schema_hash)
      .gsub(/"(\w+)":/, '\1:') # Convert keys to symbols
      .gsub(': null', ': nil') # Convert `null` to `nil`

    File.open('db/structure.rb', 'w') do |file|
      file.puts "STRUCTURE = #{formatted_hash}"
    end

    color_puts('db/structure.rb updated', color: :green)
  end

  case command
  when 'run'
    Rubee::Autoload.call
    file_names = if file_name == 'all'
      lib = Rubee::PROJECT_NAME == 'rubee' ? '/lib' : ''
      Dir.glob(".#{lib}/db/*.rb").map do |file|
        File.basename(file, '.rb')
      end.reject { |file| file == 'structure' }
    else
      [file_name]
    end
    Rubee::Configuration.envs.each do |env|
      ENV['RACK_ENV'] = env.to_s
      file_names.each do |file_name|
        color_puts("Run #{file_name} file for #{env} env", color: :cyan)
        Object.const_get(file_name.split('_').map(&:capitalize).join).new.call
      end
    end
    color_puts("Migration for #{file_name} completed", color: :green)
    unless Rubee::PROJECT_NAME == 'rubee'
      color_puts('Regenerate schema file', color: :cyan)
      generate_structure
    end
  when 'init'
    ensure_database_exists(Rubee::Configuration.get_database_url)
  when 'structure'
    generate_structure
  else
    color_puts("Unknown command: #{command}", color: :red)
  end
elsif ['console'].include?(command)
  ARGV.clear
  ENV['RACK_ENV'] ||= 'development'

  Rubee::Autoload.call
  if Rubee::PROJECT_NAME == 'rubee'
    Rubee::Configuration.setup(env = :test) do |config|
      config.database_url = { url: 'sqlite://lib/tests/test.db', env: }
    end
    Rubee::Autoload.call
    Rubee::SequelObject.reconnect!
  end

  def reload
    app_files = Dir["./#{Rubee::APP_ROOT}/**/*.rb"]
    app_files.each { |file| load(file) }
    color_puts('Reloaded ..', color: :green)
  end
  begin
    # Start IRB
    IRB.start
  rescue Exception
    IRB.start
  end
else
  color_puts "Unknown command: #{command}", color: :red
end
