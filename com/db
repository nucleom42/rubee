#!/usr/bin/env ruby

require_relative '../rubee.rb'

Rubee::Autoload.call
ENV['RACK_ENV'] ||= 'development'

command, file_name = ARGV.first&.split(':')


def ensure_database_exists(db_url)
  uri = URI.parse(db_url)
  case uri.scheme
  when "sqlite"
    begin
      Sequel.connect(db_url)
      color_puts "Database #{ENV['RACK_ENV']} exists", color: :cyan
    rescue => _
      if File.exist?(db_path = db_url.sub(/^sqlite:\/\//, ''))
        color_puts "Database #{ENV['RACK_ENV']} exists", color: :cyan
      else
        Sequel.sqlite(db_path)
        color_puts "Database #{ENV['RACK_ENV']} created", color: :green
      end
    end
  when "postgres"
    begin
      Sequel.connect(db_url)
      color_puts "Database #{ENV['RACK_ENV']} exists", color: :cyan
    rescue => _
      con = Sequel.connect(Rubee::Configuration.get_database_url.gsub(/(\/test|\/development|\/production)/, ''))
      con.run("CREATE DATABASE #{ENV['RACK_ENV']}")
      color_puts "Database #{ENV['RACK_ENV']} created", color: :green
    end
  else
    color_puts "Unsupported database type: #{db_url}", color: :red
  end
end

def generate_structure
  schema_hash = {}

  SequelObject::DB.tables.each do |table|
    schema_hash[table] = {}

    SequelObject::DB.schema(table).each do |column, details|
      schema_hash[table][column] = details
    end
  end
  formatted_hash = JSON.pretty_generate(schema_hash)
                       .gsub(/\"(\w+)\":/, '\1:')  # Convert keys to symbols
                       .gsub(': null', ': nil')   # Convert `null` to `nil`

  File.open("db/structure.rb", 'w') do |file|
    file.puts "STRUCTURE = #{formatted_hash}"
  end

  color_puts "db/structure.rb updated", color: :green
end


if command == 'run'
  Rubee::Configuration.envs.each do |env|
    ENV['RACK_ENV'] = env.to_s
    color_puts "Run #{file_name} file for #{env} env", color: :cyan
    Object.const_get(file_name.split('_').map(&:capitalize).join).new.call
  end
  color_puts "Migration #{file_name} completed", color: :green
  color_puts "Regenerate schema file", color: :cyan
  generate_structure
elsif command == 'init'
  ensure_database_exists(Rubee::Configuration.get_database_url)
elsif command == 'structure'
  generate_structure
else
  color_puts "Unknown command: #{command}", color: :red
end
